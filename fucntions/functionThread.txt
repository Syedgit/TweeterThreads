
<<<<<<MAIN>>>>>>
Functions are one of the fundamental building blocks in JavaScript. 
A function in JavaScript is similar to a procedure—a set of statements that performs a task.

A function is a subprogram designed to perform a particular task.

Values can be passed into functions and used within the function.

Functions always return a value. In JavaScript, if no return value is specified, the function will return undefined.

Functions are objects.


<<<<<<<ONE>>>>>>>

A Function Declaration defines a named function. 

To create a function declaration you use the function keyword followed by the name of the function. 

When using function declarations, the function definition is hoisted, thus allowing the function to be used before it is defined.

function name(parameters){
  statements
}
A Function Expressions defines a named or anonymous function. 
An anonymous function is a function that has no name. 
Function Expressions are not hoisted, and therefore cannot be used before they are defined.

let name = function(parameters){
  statements
}
An Arrow Function Expression is a shorter syntax for writing function expressions. Arrow functions do not create their own this value.

let name = (parameters) => {
  statements
}

{{CODE_IMAGE}}


<<<<<<<TWO>>>>>>>
The function expression or anonymous function is the function that can be assigned as an expression and without any name. 
Below example function without a name is assigned to the variable add. You can use this variable add like any other functions later.

const add = function(a, b) {
    return a + b;
}

const result = add(10, 30);

console.log("result:::::" + result);

// output 
40

{{{{{CODE_IMAGE_anonympous_funciton}}}}}



<<<<<<<THREE>>>>>>

Every function in JavaScript returns undefined unless otherwise specified.

Let’s test this by creating and invoking an empty function:

function test(){};
test();
// undefined

// Awesome, as expected, undefined is returned.

Now, we can customize what is returned in our function by using the return keyword followed by our return value. Take a look at the code below:

function test(){
  return true;
};
test();
// true

<<<<<<FOUR>>>>>>>

Function scope
Variables defined inside a function cannot be accessed from anywhere outside the function, 
Function can access all variables and functions defined inside the scope in which it is defined.

// The following variables are defined in the global scope
const num1 = 20;
const num2 = 3;
const name = 'John';

// This function is defined in the global scope
function multiply() {
  return num1 * num2;
}

multiply(); // Returns 60

// A nested function example
function getScore() {
  const num1 = 2;
  const num2 = 3;

  function add() {
    return `${name} scored ${num1 + num2}`;
  }

  return add();
}

getScore(); // Returns "John scored 5"

<<<<<<FIVE>>>>>>>

Closures
Closures are one of the most powerful features of JavaScript. 
JavaScript allows for the nesting of functions and grants the inner function full access.

Outer function does not have access to the variables and functions defined inside the inner function. 

Also, since the inner function has access to the scope of the outer function, the variables and functions defined in the outer function will live longer than the duration of the outer function execution, if the inner function manages to survive beyond the life of the outer function. A closure is created when the inner function is somehow made available to any scope outside the outer function.

const pet = function (name) {   // The outer function defines a variable called "name"
  const getName = function () {
    // The inner function has access to the "name" variable of the outer function
    return name;
  }
  return getName; // Return the inner function, thereby exposing it to outer scopes
}
const myPet = pet('Vivie');

myPet(); // Returns "Vivie"

<<<<<<<SIX>>>>>>>

Arrow functions

An arrow function expression has a shorter syntax compared to function expressions and does not have its own this.
Arrow functions are always anonymous.
Two factors influenced the introduction of arrow functions: shorter functions and non-binding of this.

// arrow function looks like this 
let func = (arg1, arg2, ..., argN) => expression;

// This creates a function func that accepts arguments arg1..argN, then evaluates the expression on the right side with their use and returns its result.

// Another Example
let sum = (a, b) => a + b;

/* This arrow function is a shorter form of:

let sum = function(a, b) {
  return a + b;
};
*/

alert( sum(1, 2) ); // 3

// If there are no arguments
let sayHi = () => alert("Hello!");

sayHi();

<<<<<<SEVEN>>>>>>

Function hoisting
The hoisting in Javascript is that all the variable and function declarations are placed at the top of the current scope while executing. 
If you take a look at the following example, 

the function add is defined at the bottom of the file yet it can be accessed at line number 5. This is because of function hoisting.

let a;

a = add(5, 10);

console.log("Result of the adding two number " + a)

function add(a, b) {
    return a + b;
}


Function hoisting only works with function declarations — not with function expressions. The code below will not work.

{{{{ADD CODE IMAGE fucntion_hoisting}}}}

<<<<<<<EIGHT>>>>>>>

The function can return another function and these inner functions either return the result or return nothing.


// function returns function which prints name
function printName() {
    return function printMyName() {
        console.log("Bhargav Bachina")
    }
}

// how to call
printName()()

// function takes arguments returns function which takes arguments and returns name
function printNameWithParams(firstName) {
    return function printMyName(lastName) {
        console.log(firstName + " " + lastName)
    }
}

// how to call
printNameWithParams("fname")("lname")

// function takes arguments returns function which takes arguments and returns addition
function addition(a) {
    return function add(b) {
        return a + b;
    }
}

// how to call
addition(10)(50)

// // functions nesting can go deep
function outer() {
    return function inner1() {
        return function inner2() {
            return function inner3() {
                return function inner4() {
                    return "returned from the inner function 4"
                }
            }
        }
    }
}

// how to call
outer()()()()()

<<<<<NINE>>>>>
How this works 

During a simple invocation the value of this equals to the global object (or undefined if the function runs in strict mode):

function myFunction() {
  console.log(this);
}
// Simple invocation
myFunction(); // logs global object (window)

During a method invocation the value of this is the object owning the method:

const myObject = {
  method() {
    console.log(this);
  }
};
// Method invocation
myObject.method(); // logs myObject

During a constructor invocation using new keyword this equals to the newly created instance:

function MyFunction() {
  console.log(this);
}
new MyFunction(); // logs an instance of MyFunction

In the following example, myMethod() is an outer function of callback() arrow function:

const myObject = {
  myMethod(items) {
    console.log(this); // logs myObject
    const callback = () => {
      console.log(this); // logs myObject
    };
    items.forEach(callback);
  }
};
myObject.myMethod([1, 2, 3]); 
this value inside the arrow function callback() equals to this of the outer function myMethod().


<<<<<KEY____TAKEWAYS>>>>>>>>

Key Takeaways.
This is a lot of information to digest. Here’s a list of the important stuff:

A function is a subprogram designed to perform a particular task.
Function definitions are hoisted — expressions are not.
Functions are executed when they are called. This is known as invoking a function.
Values can be passed into functions and used within the function. 
The name of the value is called a parameter. 
The actual value itself is called an argument.
Functions always return a value. In JavaScript, if no return value is specified, the function will return undefined by default.
Functions are objects.

<<<FinalThread>>>>>
That's a wrap! If you enjoyed this thread: 
1. Follow me @Aftabhuss to see more threads on JavaScript.
2. RT the tweet below to share this thread with your audience

{{{{Link to first thread}}}}

<<<<<<END>>>>>>>>>>>