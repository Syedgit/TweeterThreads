
<<<<<<MAIN>>>>>>
Functions are one of the fundamental building blocks in JavaScript. 
A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.

A function is a subprogram designed to perform a particular task.
Functions are executed when they are called. This is known as invoking a function.
Values can be passed into functions and used within the function.
Functions always return a value. In JavaScript, if no return value is specified, the function will return undefined.
Functions are objects.


<<<<<<<ONE>>>>>>>

There are a few different ways to define a function in JavaScript:

A Function Declaration defines a named function. To create a function declaration you use the function keyword followed by the name of the function. When using function declarations, the function definition is hoisted, thus allowing the function to be used before it is defined.

function name(parameters){
  statements
}
A Function Expressions defines a named or anonymous function. An anonymous function is a function that has no name. Function Expressions are not hoisted, and therefore cannot be used before they are defined. In the example below, we are setting the anonymous function object equal to a variable.

let name = function(parameters){
  statements
}
An Arrow Function Expression is a shorter syntax for writing function expressions. Arrow functions do not create their own this value.

let name = (parameters) => {
  statements
}

<<<<<<<TWO>>>>>>>

If you’re new to JavaScript, you may have heard the terms parameters and arguments used interchangeably. While very similar, there is an important distinction to make between these two keywords.

Parameters are used when defining a function, they are the names created in the function definition. In fact, during a function definition, we can pass in up to 255 parameters! Parameters are separated by commas in the (). Here’s an example with two parameters — param1 & param2:

const param1 = true;
const param2 = false;
function twoParams(param1, param2){
  console.log(param1, param2);
}

<<<<<<<THREEE>>>>>>>

Invoking a Function.
Functions execute when the function is called. This process is known as invocation. You can invoke a function by referencing the function name, followed by an open and closed parenthesis: ().

Lets explore an example.

If you’re using Google Chrome, open up your dev console so you can code along with these examples: [WINDOWS]: Ctrl + Shift + J [MAC]: Cmd + Opt + J

First, we’ll define a function named logIt. This function will take one parameter, name. When executed, the function will log that name back to the console:

function logIt(name){
  console.log(name);
}
To invoke our function, we call it, while passing in the singular parameter. Here I am calling this function with the name Joe:

logIt('Joe');
// Joe
If your function has no parameters, you can invoke it with an empty set of parenthesis:

function logIt2(){
  console.log('The second one');
}
logIt2();
// The second one


<<<<<<<FOUR>>>>>>

Every function in JavaScript returns undefined unless otherwise specified.

Let’s test this by creating and invoking an empty function:

function test(){};
test();
// undefined
Awesome, as expected, undefined is returned.

Now, we can customize what is returned in our function by using the return keyword followed by our return value. Take a look at the code below:

function test(){
  return true;
};
test();
// true


<<<<<KEY____TAKEWAYS>>>>>>>>

Key Takeaways.
This is a lot of information to digest. Here’s a list of the important stuff:

A function is a subprogram designed to perform a particular task.
Function definitions are hoisted — expressions are not.
Functions are executed when they are called. This is known as invoking a function.
Values can be passed into functions and used within the function. The name of the value is called a parameter. The actual value itself is called an argument.
Functions always return a value. In JavaScript, if no return value is specified, the function will return undefined by default.
Functions are objects.