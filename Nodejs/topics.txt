To teach Node.js comprehensively, you should cover the following topics:

Introduction to Node.js
What is Node.js?
History of Node.js
Advantages of Node.js
Comparison with other server-side technologies

Basic Concepts of Node.js
JavaScript on the server-side
Node.js Architecture
Node.js Event-Driven Model
Node.js Non-Blocking I/O

Node.js Frameworks
Express.js
Koa.js
Hapi.js
Sails.js

Asynchronous Programming in Node.js
Callbacks
Promises
Async/await

Node.js modules
Built-in modules
Third-party modules
Creating custom modules

Node.js and Database
Working with SQL databases
Working with NoSQL databases
Using ORMs (Object-Relational Mapping) like Sequelize or Mongoose

Node.js and RESTful APIs
Creating RESTful APIs
Handling HTTP requests
Handling authentication and authorization

Node.js and WebSocket
WebSockets and real-time applications
Working with Socket.io

Node.js and Testing
Unit testing with Mocha, Chai, and Sinon
Integration testing with Supertest

Node.js and Deployment
Deploying Node.js applications to various platforms
Using Docker for containerization
Using Continuous Integration and Deployment (CI/CD) tools

Node.js and Security
Common security vulnerabilities in Node.js
Security best practices for Node.js applications
Using security tools like helmet.js

Node.js and Performance
Common performance issues in Node.js applications
Best practices for improving Node.js application performance
Using performance monitoring and profiling tools
These are the major topics that you should cover while teaching Node.js. Of course, the level of depth you go into each topic will depend on the level of your students' expertise and experience.